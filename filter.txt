Implementation ideas
================================================================================

    def dictToQuery(self, d):
        return " AND ".join(["%s:%s" % (kv[0], kv[1]) for k, v in d.items()])

    @shift_join
    def shifts(self, start=None, end=None, limit=25, filter=False, query=None):
        from server.models.shift import Shift
        db = core.connect("shiftspace/shared")
        if not filter:
            if not start:
                start = [self.id]
            if not end:
                end = [self.id, {}]
            results = Shift.by_user_and_created(db, limit=limit)
            return core.objects(results[start:end])
        else:
            lucene = core.lucene()
            queryString = "createdBy:%s" % self.id
            if query and (query.keys() in ['title', 'summary', 'tag']):
                pass
            try:
                rows = lucene.search(db, "shifts", q=queryString, include_docs=True, sort=queryField)
            except Exception, err:
                print err
                return []
            shifts = [row["doc"] for row in rows]
            return Shift.joinData(shifts, self.id)
