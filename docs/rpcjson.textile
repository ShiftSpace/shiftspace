This wiki covers the progress on the ShiftSpace RPC API and the JSON data format specification. ShiftSpace will be adopting CouchDB's RESTful design, though of course some operations must have "side effects." For example if a user document is deleted, all objects associated with that user (within reasonable bounds) should be deleted as well.

We don't specify any particular authentication scheme, however the tests that come with ShiftSpace will check to see that permissions are not compromised.

h1. Objects

h2. user

* id (string auto-generated)
* type = "user"
* userName (string)
* displayName (string)
* email (string)
* password (string - md5 hash)
* joined (date)
* lastSeen (date)
* subscriptions (array - of stream ids)
* preferences (schema-less object)

h2. shift

A shift is a document. Shifts are generally created by spaces. Spaces are "apps" for ShiftSpace- thirdy party extensions to the ShiftSpace interface. Spaces encode modifications to websites in the form of shifts. For example, you use the Notes space to create a Note shift. This Note shift (if public) can be viewed by anyone else using the Notes Space. Because different Spaces will need to save different kinds of documents, we do not specify a schema for the content of a shift.

* id (string auto-generated)
* type = "shift"
* createdBy (string)
* href (string)
* domain (string)
* space (object)
** name
** version
* summary (string)
* created (date)
* modified (date)
* broken (boolean)
* publishData (object)
** draft (boolean)
** publishTime (date)
** private (boolean)
* content (schema-less object)

h2. stream

A stream abstracts tagging, commenting, events, groups and more. For example if in ShiftSpace if you follow a user you are subscribing to that user's stream. If you leave a comment on a shift you are posting an event to that particular shift's stream. A group is simply a stream that multiple users are subscribed to. Permission objects control who can view, edit, and post events to a stream.
   
* id (string, auto-generated)
* type = "stream"
* displayName (string)
* created (date)
* createdBy (string, user id)
* private (boolean)
* objectRef (string, format "documentType:id")

h2. event

An event is something that occurred. When you tag a shift, this adds an event to the stream that represents that tag. A comment is an event on a shift's stream. If you are an educator and publish a shift to your class' group, an event referencing that shift is posted to the stream that represents your class' group.

* id (string, auto-generated)
* type = "event"
* displayString (string)
* streamId (string)
* created (date)
* createdBy (string, user id)
* objectRef (string, format "documentType:id")

h2. permission

This object controls who can view/post/edit to a stream.

* id
* type = "permission"
* userId (string, user id)
* level (integer, 0=none, 1=read, 2=write, 3=admin) 

h1. API

Refer to the "CouchDB HTTP Document API":http://wiki.apache.org/couchdb/HTTP_Document_API to understand the rationale.

h2. user

h3. Core User Functions

h4. Create a user: POST /user

a stream with objectRef set to "user:id" should be created as well as a corresponding permission object with this user set as the admin.

* *required parameters:* userName, email, password
* *optional parameters:* preferences, displayName
  
h4. Update a user: PUT /user/:userName

* *optional parameters:* userName, displayName, email, password, preferences.
* *client authentication required*.

h4. Delete a user: DELETE /user/:userName

user shift, trail, and event documents must be deleted (streams?)

* *client authentication required*.

h4. Login a user: POST /user/login

Start a user session.

* *required parameters:* userName, password

h4. Logout a user: POST /user/logout

End a user session.

GET /user/query to check to see if the user is currently logged in

If there is an existing user session returns an object containing at least the userName, userId, email, and preferences. 

h4. Stream User Functions   

POST /user/:id/subscribe

Subscribe a user to a stream. After the subscribing, the specified stream's events will appear when calling /user/:userName/feeds.

* *required parameters:* streamId

POST /user/:id/unsubscribe

Unsubscribe a user from a stream. After unsubscribing, the specified stream's events will no longer appear when calling /user/:userName/feeds.

* *required parameters:* streamId

GET /user/:id/feeds, returns the list of events for all the streams that a user is subscribed to. 

GET /user/:id/feed, to get a specific stream for a particular user, must specify a streamId

h3. shift

POST /shift to create a shift, a corresponding stream object with an objectRef property set to "shift:id" should be created along with the shift creator set as an admin for this stream. 

PUT /shift/:id to update a shift

DELETE /shift/:id to delete a shift

h3. stream

POST /stream to create a stream

PUT /stream/:id to update a stream

DELETE /stream/:id to delete a stream

GET /stream/find/:objectRef to find a stream relating to a particular object reference

GET /stream/has/:objectRef to find all streams that have events referring to a particular object reference.

h3. event

POST /event to create an event. And event must specify a stream id.

PUT /event/:id to update an event.

DELETE /event/:id to delete an event

GET /event/find/:objectRef to find all events that refer to a particular object reference.

An event should be copied for each each subscriber of the stream.

h3. permission

POST /permission to create a permission

PUT /permission/:id to update a permission

DELETE /permission/:id to delete a permission