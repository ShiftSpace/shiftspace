This wiki covers the progress on the ShiftSpace RPC API and the JSON data format specification. ShiftSpace borrows a few ideas from the design of CouchDB's HTTP API. There are of course some difference, for example, some operations must have "side effects." For example if a user object is deleted, all objects associated with that user (within reasonable bounds) should be deleted as well.

We don't specify any particular authentication scheme, however the tests that come with ShiftSpace will check to see that object permissions are not compromised.

h1. Objects

h2. user

* id (string auto-generated)
* type = "user"
* userName (string, must be unique)
* displayName (string)
* email (string)
* password (string - md5 hash)
* joined (date)
* lastSeen (date)
* subscriptions (array - of stream ids)
* preferences (schema-less object)

h2. shift

A shift is a document. Shifts are generally created by spaces. Spaces are "apps" for ShiftSpace- thirdy party extensions to the ShiftSpace interface. Spaces encode modifications to websites in the form of shifts. For example, you use the Notes space to create a Note shift. This Note shift (if public) can be viewed by anyone else using the Notes Space. Because different Spaces will need to save different kinds of documents, we do not specify a schema for the content of a shift. If your are implementing the specification on top of MySQL or SQLite schema-less objects will have to opaque JSON objects encoded as strings. If you are implementing on top of CouchDB or comparable schema-less database, the content field will be transparent.

* id (string auto-generated)
* type = "shift"
* createdBy (string)
* href (string)
* domain (string)
* space (object)
** name
** version
* summary (string)
* created (date)
* modified (date)
* broken (boolean)
* publishData (object)
** draft (boolean)
** publishTime (date)
** private (boolean)
* content (schema-less object)

h2. stream

A stream abstracts tagging, commenting, events, groups and more. For example in ShiftSpace if you follow a user, you are in effect subscribing to that user's stream. If you leave a comment on a shift you are posting an event to that particular shift's stream. A group is simply a stream that multiple users are subscribed to. Permission objects control who can view and post events to that stream as well as control permissions on that strema.
   
* id (string, auto-generated)
* type = "stream"
* createdBy (string, user id)
* displayName (string)
* created (date)
* modified (date)
* private (boolean) - do we need this?
* objectRef (string, format "documentType:id")

h2. event

An event is something that occurred. When you tag a shift, this adds an event to the stream that represents that tag. A comment is an event on a shift's stream. If you are an educator and publish a shift to your class' group, an event referencing that shift is posted to the stream that represents your class' group.

* id (string, auto-generated)
* type = "event"
* createdBy (string, user id)
* streamId (string)
* displayString (string)
* created (date)
* modified (date)
* objectRef (string, format "documentType:id")
* content (schema-less object)

h2. permission

This object controls who can view/post events to a stream as well as modify permissions for that stream.

* id
* type = "permission"
* userId (string, user id)
* level (integer, 0=none, 1=read, 2=write, 3=admin) 

h1. API

Refer to the "CouchDB HTTP Document API":http://wiki.apache.org/couchdb/HTTP_Document_API to understand the rationale. All server calls should return ack:

<pre>
{data: "ok"}
</pre>

or err:

<pre>
{error: message}
</pre>

unless otherwise noted. 

h2. user

h3. Create a user: 

<pre>
POST /user
</pre>

The server should record the time and set the joined field. In addition a stream with objectRef set to "user:id" and createdBy field set to the user's id should be created.

* *required parameters:* userName, email, password
* *optional parameters:* preferences, displayName
* *returns*: a json object containing at least userName, email, and displayName. The password field should be excluded.

h3. Update a user:

<pre>
PUT /user/:userName
</pre>

* *optional parameters:* userName, displayName, email, password, preferences.
* *client authentication required*.

h3. Delete a user: 

<pre>
DELETE /user/:userName
</pre>

The user's stream, events, shifts should be deleted. Streams that the user created will not be deleted. The behavior of a stream with a deleted creator is undefined (who gets admin privileges?, notify stream members of orphan status?). You should implement the proper handling behavior for each particular type of stream for your application when a user deletion occurs. 

* *client authentication required*.

h3. Login a user: 

<pre>
POST /user/login
</pre>

Start a user session.

* *required parameters:* userName, password
* *returns:* the same result as a user creation call.

h3. Logout a user: 

<pre>
POST /user/logout
</pre>

End a user session. This should update the lastSeen field of the user's document. This value can be used to figure out which feeds to bring in.

h3. Check if there is an existing session:

<pre>
GET /user/query 
</pre>

If there is an existing user session returns an object containing at least the userName, userId, email, and preferences. 

* *returns*: same result as a user login or create call.

h3. Subscribe a user to a stream

<pre>
POST /user/:userName/subscribe
</pre>

After subscribing, the specified stream's events will appear when calling /user/:userName/feeds. A user may only subscribe to a stream which has a permission object with userId set to his/her userId or to the value "any".

* *required parameters:* streamId

h3. Unsubscribe a user from a stream

<pre>
POST /user/:userName/unsubscribe
</pre>

After unsubscribing, the specified stream's events will no longer appear when calling /user/:userName/feeds.

* *required parameters:* streamId

h3. Get a feed of all the user's subscriptions 

<pre>
GET /user/:userName/feeds
</pre>
  
* *optional parameters*: from (date), count (integer).
* *returns*: an array of event objects for all streams the user is subscribed to. These are ordered by creation date.

h3. Get only a specific subscription 

<pre>
GET /user/:userName/feed
</pre>

* *required parameters:* streamId.
* *returns*: an array of event objects for only the specified stream.

h2. shift

h3. Create a shift: 

<pre>
POST /shift to create a shift
</pre>

A corresponding stream object with an objectRef property set to "shift:id" and createdBy set to the user's id should be created.

* *returns:* all shift data in addition to it's newly assigned id.

h3. Update a shift:

<pre>
PUT /shift/:id
</pre>

* *client authentication required*, user attempting update must match createdBy

h3. Delete a shift:

<pre>
DELETE /shift/:id
</pre>

* *client authentication required*, user attempting delete must match createdBy

h2. stream

h3. Create a stream

<pre>
POST /stream
</pre>

the stream objectRef must be unique (any argument against this limitation?)

h3. Update a stream

<pre>
PUT /stream/:id
</pre>

Only the stream displayName may be modified after creation. Only the creator can change this value.

* *client authentication required*, user attempting delete must match createdBy

h3. Delete a stream

<pre>
DELETE /stream/:id
</pre>

All events on this stream will be deleted as well.

* *client authentication required*, user attempting delete must match createdBy

h3. Find a stream:

<pre>
GET /stream/find/:objectRef
</pre>

* *returns:* a readable stream with matching objectRef field.

h3. Find matching streams:

<pre>
GET /stream/has/:objectRef
</pre>

* *returns:* an array of readable stream objects which have events with matching objectRefs. 

h2. event

h3. Create an event

<pre>
POST /event
</pre>

A user can only post an event to a stream for which he/she has write permissions.

* *required parameters*: streamId
* *options paramaters*: objectRef, displayString
* *client authentication required*

h3. Update an event

<pre>
PUT /event/:id
</pre>

Only the creator of the event can modify the event and only the displayString and content fields may be modified after creation. 

* *client authentication required*, createdBy must match the user attempting the modification.

h3. Delete an event

<pre>
DELETE /event/:id
</pre>

* *client authentication required*, createdBy must match the user attempting the deletion.

h3. Find matching events

<pre>
GET /event/find/:objectRef
</pre> 

Find all events for which the requester has stream permissions (hmm this sounds tricky)

h2. permissions

Permissions control who can see and edit a stream as well control who can add others to the stream.

h3. Create a permission:

<pre>
POST /permission
</pre>

Adds a permission document to a stream. A stream cannot be read or written to by non-creators without at least one corresponding permission document. If you wish to give public read access set the userId field to "any" and set the level field to 1. There can either be one permission object with userId field set to "any" or multiple permission objects with valid userIds.

Only the creator or admins can create new permission objects for a stream.

* *required paramaters:* streamId, userId
* *optional parameters:* level (default 0)
* *client authentication required*

h3. Update a permission:

<pre>
PUT /permission/:id
</pre>

After creation only the level maybe changed. All other values in the update operations are invalid and should throw an error.

* *client authentication required*

h3. Delete a permission

If the user is subscribed to a stream to which his/her permission has been deleted, he/she will be unsubscribed. Any events posted by user on the stream should also be deleted.

<pre>
DELETE /permission/:id
</pre>

* *client authentication required*

h2. Bulk

Often times it is convenient to pass in a set of operations. The operation list should take the following form. For each operation, the server will return a result for that operation. Warning, if an operation the server will continue to execute following operations.  The result of the failed operation will reflect the error.