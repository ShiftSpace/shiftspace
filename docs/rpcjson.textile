This wiki covers the progress on the ShiftSpace RPC API and the JSON data format specification. ShiftSpace will be adopting CouchDB's RESTful design, though of course some operations must have "side effects." For example if a user document is deleted, all objects associated with that user (within reasonable bounds) should be deleted as well.

We don't specify any particular authentication scheme, however the tests that come with ShiftSpace will check to see that permissions are not compromised.

h1. Objects

h2. user

* id (string auto-generated)
* type = "user"
* userName (string)
* displayName (string)
* email (string)
* password (string - md5 hash)
* joined (date)
* lastSeen (date)
* subscriptions (array - of stream ids)
* preferences (schema-less object)

h2. shift

A shift is a document. Shifts are generally created by spaces. Spaces are "apps" for ShiftSpace- thirdy party extensions to the ShiftSpace interface. Spaces encode modifications to websites in the form of shifts. For example, you use the Notes space to create a Note shift. This Note shift (if public) can be viewed by anyone else using the Notes Space. Because different Spaces will need to save different kinds of documents, we do not specify a schema for the content of a shift.

* id (string auto-generated)
* type = "shift"
* createdBy (string)
* href (string)
* domain (string)
* space (object)
** name
** version
* summary (string)
* created (date)
* modified (date)
* broken (boolean)
* publishData (object)
** draft (boolean)
** publishTime (date)
** private (boolean)
* content (schema-less object)

h2. stream

A stream abstracts tagging, commenting, events, groups and more. For example if in ShiftSpace if you follow a user you are subscribing to that user's stream. If you leave a comment on a shift you are posting an event to that particular shift's stream. A group is simply a stream that multiple users are subscribed to. Permission objects control who can view, edit, and post events to a stream.
   
* id (string, auto-generated)
* type = "stream"
* displayName (string)
* created (date)
* createdBy (string, user id)
* private (boolean)
* objectRef (string, format "documentType:id")

h2. event

An event is something that occurred. When you tag a shift, this adds an event to the stream that represents that tag. A comment is an event on a shift's stream. If you are an educator and publish a shift to your class' group, an event referencing that shift is posted to the stream that represents your class' group.

* id (string, auto-generated)
* type = "event"
* displayString (string)
* streamId (string)
* created (date)
* createdBy (string, user id)
* objectRef (string, format "documentType:id")

h2. permission

This object controls who can view/post/edit to a stream.

* id
* type = "permission"
* userId (string, user id)
* level (integer, 0=none, 1=read, 2=write, 3=admin) 

h1. API

Refer to the "CouchDB HTTP Document API":http://wiki.apache.org/couchdb/HTTP_Document_API to understand the rationale.

h2. user

h3. Create a user: 

<pre>
POST /user
</pre>

a stream with objectRef set to "user:id" should be created with the createdBy field set to the user's id.

* *required parameters:* userName, email, password
* *optional parameters:* preferences, displayName

h3. Update a user:

<pre>
PUT /user/:userName
</pre>

* *optional parameters:* userName, displayName, email, password, preferences.
* *client authentication required*.

h3. Delete a user: 

<pre>
DELETE /user/:userName
</pre>

user shift, trail, and event documents must be deleted (streams?)

* *client authentication required*.

h3. Login a user: 

<pre>
POST /user/login
</pre>

Start a user session.

* *required parameters:* userName, password

h3. Logout a user: 

<pre>
POST /user/logout
</pre>

End a user session.

h3. Check if there is an existing session:

<pre>
GET /user/query 
</pre>

If there is an existing user session returns an object containing at least the userName, userId, email, and preferences. 

h3. Subscribe a user to a stream

<pre>
POST /user/:userName/subscribe
</pre>

After subscribing, the specified stream's events will appear when calling /user/:userName/feeds.

* *required parameters:* streamId

h3. Unsubscribe a user from a stream

<pre>
POST /user/:userName/unsubscribe
</pre>

After unsubscribing, the specified stream's events will no longer appear when calling /user/:userName/feeds.

* *required parameters:* streamId

h3. Get a feed of all the user's subscriptions 

<pre>
GET /user/:userName/feeds
</pre>
  
Returns the list of events for all the streams that a user is subscribed to. 

h3. Get only a specific subscription 

<pre>
GET /user/:userName/feed
</pre>

* *required parameters:* streamId

h2. shift

h3. Create a shift: 

<pre>
POST /shift to create a shift
</pre>

Aa corresponding stream object with an objectRef property set to "shift:id" should be created along with the shift creator set as an admin for this stream. 

h3. Update a shift:

<pre>
PUT /shift/:id
</pre>

* *client authentication required*, user attempting update must match createdBy

h3. Delete a shift:

DELETE /shift/:id to delete a shift

* *client authentication required*, user attempting delete must match createdBy

h2. stream

h3. Create a stream

<pre>
POST /stream
</pre>

h3. Update a stream

<pre>
PUT /stream/:id
</pre>

h3. Delete a stream

<pre>
DELETE /stream/:id
</pre>

h3. Find a stream:

<pre>
GET /stream/find/:objectRef
</pre>

h3. Find matching streams:

<pre>
GET /stream/has/:objectRef
</pre>

h2. event

h3. Create an event

<pre>
POST /event
</pre> 

h3. Update an event

<pre> 
PUT /event/:id
</pre>

h3. Delete an event

<pre>
DELETE /event/:id
</pre>

h3. Find matching events

<pre>
GET /event/find/:objectRef
</pre> 

An event should be copied for each each subscriber of the stream.

h2. permissions

h3. Create a permission:

<pre>
POST /permission
</pre>

h3. Update a permission:

<pre>
PUT /permission/:id
</pre>

h3. Delete a permission 

<pre>
DELETE /permission/:id
</pre>

h2. Bulk

Often times it is convenient to pass in a set of operations. The operation list should take the following form. For each operation, the server will return a result for that operation. Warning, if an operation the server will continue to execute following operations.  The result of the failed operation will reflect the error.

h2. About Permissions

Client deletion of objects requires a match between the user and the createdBy field of the object to be destroyed. createdBy always represents the root owner of the object.