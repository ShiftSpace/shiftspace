// Promises would greatly simply the asynchronous logic of ShiftSpace
// ==================================================================

// ==============
// Loading Spaces
// ==============

var SSSpaceForName = function(name)
{
  if(!__spaces[name])
  {
    __space[name] = SSSpaceAttrs(name).op(function(value) {
      if(value)
      {
        return SSRegisterSpace(SSLoadSpace(value));
      }
      else
      {
        delete __space[name];
      }
    });
    /*
    __space[name] = $iflet("attrs", SSSpaceAttrs(name),
                           SSLoadSpace.thread(SSRegisterSpace).receive("attrs"),
                           function() { delete __space[name]; });
    */
  }
  return __space[name];
}.asPromise();


var SSSpaceAttrs = function(name)
{
  return app.fetch(SSInfo().spaceDir+'/attrs.json');
}.decorate(promise, memoize);


var SSLoadSpace = function(attrs)
{
  var ps = [];
  
  if(attrs.css)
  {
    ps.push(app.fetch(SSInfo().spaceDir+"/"+attrs.css));
  }
  
  if(attrs.includes)
  {
    ps.combine(attrs.includes.map(toFullUrl).map(app.fetch));
  }
  
  var space = app.fetch(SSInfo().server+'/'+spaceName+'/'+spaceName+'.js');
  space.op(function(value) { eval("(function(){" + value + "; return " + name + ";})()"; });
  
  var p = new Promise(ps);
  p.op(function(value) { return value.last(); });
  return p;
}.asPromise();


var SSRegisterSpace = function(space)
{
  SSSetSpaceForName(space, space.name);

  space.addEvent('onShiftUpdate', SSSaveShift.bind(this));

  if (typeof ShiftSpaceSandBoxMode != 'undefined') 
  {
    ShiftSpace[instance.name] = instance;
  }
  if(ShiftSpace.Console)
  {
    space.addEvent('onShiftHide', ShiftSpace.Console.hideShift.bind(ShiftSpace.Console));
  }

  space.addEvent('onShiftShow', function(shiftId) {
    if(ShiftSpace.Console) ShiftSpace.Console.showShift(shiftId);
  });

  space.addEvent('onShiftBlur', function(shiftId) {
    SSBlurShift(shiftId);
    if(ShiftSpace.Console) ShiftSpace.Console.blurShift(shiftId);
  });

  space.addEvent('onShiftFocus', function(shiftId) {
    SSFocusShift(shiftId);
    if(ShiftSpace.Console) ShiftSpace.Console.focusShift(shiftId);
  });

  instance.addEvent('onShiftSave', function(shiftId) {
    space(ShiftSpace.Console)
    {
      ShiftSpace.Console.blurShift(shiftId);
    }
  });

  instance.addEvent('onShiftDestroy', SSUnloadShift);
  
  return space;
}.asPromise();

// ==============
// Loading Shifts
// ==============

var SSShiftVerify = [
   function(value) { if (value == null) return false; return true; }
];

var SSSpaceShiftVerify = [
   function(value) { if (value == SSDoNotInstall) return false; return true; }, 
   SSShiftVerify[0]
];

var SSShowShift = function(space, shift) {
  space.show(shift);
}.decorate(promise, pre(SSSSpaceShiftVerify));

var SSEditShift = function(space, shift) {
  space.edit(shift);
}.decorate(promise, pre(SSSpaceShiftVerify));

var SSHideShift = function(space, shift) {
  space.edit(shift);
}.decorate(pre(SSShiftVerify));

var SSHideShift = function(space, shift) {
  space.edit(shift);
}.decorate(pre(SSShiftVerify));

SSAddObserver('onUserSelectShift', function() {
  SSShowShift(SSSpaceForName(spaceName), SSGetShift(shiftId));
});

SSAddObserver('onUserDeselectShift', function() {
  SSHideShift(SSSpaceForName(spaceName), SSGetShift(shiftId));
});
