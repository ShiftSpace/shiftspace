h1. Tutorial

h2. Getting started

This tutorial will guide you through building what is perhaps the simplest space that you can make: HelloWorld. The HelloWorld space, when completed, will allow you to add the words 'Hello World!' as a shift to any page on the web. Potentially, anyone else who has ShiftSpace installed will be able to see your message if they happen to discover it on a page, are following, or are part of group that you published the shift to.

But before we begin, make sure you're running "Firefox":http://mozilla.com, that you've "installed the ShiftSpace development environment":install.html, that you have "Greasemonkey enabled":http://greasespot.net and that you've installed the development userscript (this is available from the ShiftSpace status page, which might have a URL something like this: <tt>http://localhost/shiftspace/shiftspace.php</tt>). You also need to install the "Firebug extension":http://addons.mozilla.org/firefox/1843 for Firefox. You currently need it for installing and uninstalling spaces (until we build a proper user interface) and it will also prove invaluable for debugging.

Finally, point your browser at the ShiftSpace Developer Sandbox. This will probably be something like http://localhost/~yourusername/ShiftSpaceInstallDir/sandbox/index.php.

h3. Creating the file

Open the 'spaces' directory of your ShiftSpace root directory and create a folder called HelloWorld. In your HelloWorld directory, create an empty file called HelloWorld.js and copy the image HelloWorld.png from the ShiftSpace images directory into your HelloWorld directory.

h2. Extending the base classes

At its most basic level, building a new Space involves defining two things:

** The Space class itself (manage the overall UI/behavior for the Space) 
** A specific Shift class (manage the UI/behavior of individual shifts)

h3. Extending the Space class

To begin, we need extend the ShiftSpace.Space class. This is a very simple operation with MooTools, which offers useful object oriented conventions. By creating subclasses from the ShiftSpace.Space and ShiftSpace.Shift abstract base classes, you gain access to restricted ShiftSpace methods and benefit from our prewritten code. We try to do lot of heavy lifting for you. If you developed a Space prior to 1.0 please note that the subclassing syntax has changed because we are now only supporting MooTools 1.2.

<pre>
var HelloWorldSpace = new Class({
  Extends: ShiftSpace.Space
  // In a more complicated space you might have stuff here!
});
</pre>

After a lot of consideration we realized this is some serious boilerplate code. You have to write this everytime. So here's a shortcut.

<pre>
var HelloWorldSpace = Space();
</pre>

This code is functionally equivalent to previous one but it's a lot less typing.

h3. Extending the Shift class

Now we need to make a HelloWorld Shift class. To do this we need to extend the ShiftSpace.Shift class. Again you could write it like the following:

<pre>
var HelloWorldShift = new Class({
  Extends: ShiftSpace.Shift
  // Your code will go here
});
</pre>

But's simpler and easier to remember to write this:

<pre>
var HelloWorldShift = Shift({
  // Your code will go here
});
</pre>

Normally you won't need to create Shift instances yourself. ShiftSpace already has user interfaces and code that handles creating new shift instances automatically. The first thing you want to implement is the <tt>setup</tt> method.  You should initialize your shift instances based on the properties of the passed in JSON object.

<pre>
var HelloWorldShift = new Class({
  Extends: ShiftSpace.Shift
  setup: function(json) {
    // More code here
  }
});
</pre>

When a user clicks on the Shift Menu to create a new Shift, the following sequence of events is initiated:

<ol>
<li>The ShiftSpace controller object is invoked</li>
<li>
  A JSON object with the following properties is generated:
<pre>
{
  id: "newShift4928",           // A temporary ID, replaced upon saving
  space: "HelloWorld",          // The name of the space that was invoked 
  username: "alice",            // The username of the author
  ...                           // many other private fields
  content: {
    position: { x: 482, y: 3 2} // Page coordinates where the shift was created
  }
}
</pre>
</li>
<li>The <tt>createShift</tt> method of ShiftSpace.Space is called, passing it the JSON object</li>
<li>A new Shift object instance is created, and the <tt>setup</tt> method is passed the content field of the JSON object</li>
</ol>

h3. The space attributes file

Prior to 1.0, developers would put their space attributes in the class definition. This is no longer supported and in fact your space will not properly load if you attempt to do this. In order for ShiftSpace to load you must provide a separate attr.json file in your space directory. Why?

We want to support a wider variety of Spaces than prior releases did. For example you might want to create a space that always automatically loads on the New York Times. Because the ShiftSpace runtime always loads Spaces lazily (that is, spaces are not loaded until a user actually tries to view, create, or edit a shift) this presents a problem. The only way for ShiftSpace to know about the capabilities of your space before loading it is for you to provide the attrs.json file.

Create a new text file called *attr.json* and make it look the following:

<pre>
{
  name: 'HelloWorld',
  authors: ['yourname'],
  icon: 'HelloWorld.png',
  css: 'HelloWorld.css',
  description: 'My first space for ShiftSpace 1.0!',
  tooltip: 'The most awesome space evar!',
  version: 0.1,
  shift: { html: 'HelloWorld.html' }
}
</pre>

This should be pretty self explanatory. One thing to note is the *shiftui* property that we've defined. In the past space developers had to define their interface by writing code. This ended up being a fairly time consuming and tedious affair. Since that time we developed a very useful system called Sandalphon which allows us to design our interfaces using only HTML and CSS. Recently we've made it possible for you to access this functionality without having to know too much about how it works.

h3. Note about conventions

Note that we called the space class *HelloWorldSpace* and the shift class "HelloWorldShift". This is actually somewhat important. This is a convention. Notice that we did not write it as "HelloWorld_Space". Of course you don't have to follow conventions, but the ShiftSpace runtime cannot read your mind. If you have a different name convention you would like to use you will need to specify this. If you want to use a different name for your space class specify a *className* property. For a different shift class name use *shift.className*.

h3. Designing your interface with HTML and CSS

The ShiftSpace teams believes that building extensions to the browser should be "webby." To us this means HTML+CSS+JavaScript. In the past we leaned a little heavily on JavaScript. Space development now supports designing the look and feel of your interface almost entirely with HTML and CSS. For anything but the most trivial of spaces, this saves hundreds of lines of boilerplate code.

Basically you provide an html file and we'll add this as property to each shift when it get's created. This might not make much sense right now so let's see how it works.

Create a new file in your space directory called *HelloWorld.html* and put the following into it:

<pre>
<div class="HelloWorldShift">
  HelloWorld!
</div>
</pre>

I know it's hard to believe but that's it. Now for our CSS file. Create a new file in your space directory called *HelloWorld.css* and put the following into:

<pre>
.HelloWorldShift
{
  font: 12px verdana sans-serif;
  position: absolute;
  padding:  5px 10px 5px 10px;
  color: #FFF;
  background-color: #F63B02;
  left:200px;
  top:200px;
}
</pre>

h2. Installing your space

To install your space simply click on the Setting tab of the ShiftSpace Console. From there click on the Spaces subtab. You should see a list including the pre-installed spaces. Scroll down to the input field. Type in 'HelloWorld' and click the Install button. Careful, Space names are case sensitive. You should see your Space icon appear along with the name underneath the default installed Spaces.

h2. Making it do something

You're probably eager to see this space in action. Make your space code look like the following:

<pre>
var HelloWorldSpace = Space();
var HelloWorldShift = Shift({
  setup: function(json) {
    this.setPosition(json.position);
    this.makeDraggable();
    this.save();
  }
});
</pre>

This is actually a fully functioning space. Refresh your browser and use the *Space Menu* to create a new HelloWorld shift. You should see it appear on the center of the screen as well as the console. That's because we called the *save* method as soon as the shift is created. 

It's draggable. Move it around. Refresh the browser and click on the shift in the console. You should see it reappear in the last spot you left it.

Congratulations!

Now let's look at how your shift is able to magically appear on the screen and remember it's spot when you move it around.

h2. Making it do something interesting

So now what you have is a Space that, technically, satisfies all the requirements of the ShiftSpace platform. This final section will explain how you might start adding more interesting behaviors to your space.

h3. Initializing the shift

Let's jump back to the code to put some content on the page. Let's add a some more code into the HelloWorldShift.

<pre>
var HelloWorldShift = new Class({
  Extends: ShiftSpace.Shift,

  setup: function(json) {
    this.element.setStyles({left: json.position.x, top: json.position.y});
    $(document.body).grab(this.element);
  }
}
</pre>

h3. Saving the shift

While the above is enough for you to see something appear, it's not enough to make the shift persist in the database. Do that you need to call the *Shift.save* method like so:

<pre>
var HelloWorldShift = new Class({
  Extends: ShiftSpace.Shift,

  setup: function(json) {
    this.element.setStyles({left: json.position.x, top: json.position.y});
    $(document.body).grab(this.element);
    this.save();
  },
  
  encode: function() {
    var pos = this.element.getPosition();
    return {
      summary : 'A hello world shift',
      position : pos
    };
  }
}
</pre>

Note that we adde a new method - *Shift.encode*. When you call *Shift.save*, ShiftSpace calls your encode method to get values you think are worth saving. Each field that you encode will be handed back to you in *setup*. So if you save a shift, reload the page and then click it in the console, ShiftSpace will load those values you encoded and make sure they get sent back to your shift.

Again *encode* like *setup* are not methods you call yourself. ShiftSpace will call these methods for you at the proper time. While this approach may seem odd at first, it really frees you up to concern yourself only with the kinds of actions and behaviors you would like your space to provide.

This is all the code that is required to display your shift on the screen and persist it. Try it out, refresh your browser and select the HelloWorld space from the space menu. You should see a HelloWorld shift appear somewhere towards the center of the screen. Note that *this.element* was set to the markup that you specified in the *shift.html* field of your *attrs.json* file.

h2. Enhancements

You have now created a fully functional Space, albeit one that lacks any meaningful purpose. These last few steps will illustrate how you might proceed next in making this more useful to users.

h3. Making it draggable

h3. Changing the message

h3. The finished code
